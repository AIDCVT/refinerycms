# encoding: utf-8
Refinery::Storage.configure do |config|

  # Should set this if concerned about DOS attacks. See
  # http://markevans.github.com/storage/file.Configuration.html#Configuration

  # config.secret       = <%= Refinery::Storage.secret.inspect %>
  # config.verify_urls  = <%= Refinery::Storage.verify_urls.inspect %>

  # Refinery passes all options to Storage. See refinerycms/storage/lib/refinery/storage/configuration.rb and
  # http://markevans.github.com/storage/file.Configuration.html#Configuration

  # config.url_format           = <%= Refinery::Storage.url_format.inspect %>
  # config.url_host             = <%= Refinery::Storage.url_host.inspect %>
  # config.url_path_prefix      = <%= Refinery::Storage.url_path_prefix.inspect %>

  # config.allow_legacy_urls    = <%= Refinery::Storage.allow_legacy_urls.inspect %>
  # config.analysers            = <%= Refinery::Storage.analysers.inspect %>
  # config.before_serve         = <%= Refinery::Storage.before_serve.inspect %>
  # config.datastore_root_path  = <%= Refinery::Storage.datastore_root_path.inspect %>
  # config.define_url           = <%= Refinery::Storage.define_url.inspect %>
  # config.storage_url        = <%= Refinery::Storage.storage_url.inspect %>
  # config.fetch_file_whitelist = <%= Refinery::Storage.fetch_file_whitelist.inspect %>
  # config.fetch_url_whitelist  = <%= Refinery::Storage.fetch_url_whitelist.inspect %>
  # config.generators           = <%= Refinery::Storage.generators.inspect %>
  # config.mime_types           = <%= Refinery::Storage.mime_types.inspect %>
  # config.name                 = <%= Refinery::Storage.name.inspect %>
  # config.path_prefix          = <%= Refinery::Storage.path_prefix.inspect %>
  # config.plugin               = <%= Refinery::Storage.plugin.inspect %>
  # config.processors           = <%= Refinery::Storage.processors.inspect %>
  # config.response_header      = <%= Refinery::Storage.response_header.inspect %>


  # Set the S3 options using means other than securely by environment variables.
  # If you have to.
  # config.s3_bucket_name = ENV['S3_BUCKET']
  # config.s3_region = ENV['S3_REGION']
  # config.s3_access_key_id = ENV['S3_KEY']
  # config.s3_secret_access_key = ENV['S3_SECRET']

  # When true will use Amazon's Simple Storage Service instead of the default file system for storing resources and images
  config.s3_datastore = config.s3_access_key_id.present? || config.s3_secret_access_key.present?

  # config.s3_fog_storage_options = <%= Refinery::Storage.s3_fog_storage_options.inspect %>
  # config.s3_root_path           = <%= Refinery::Storage.s3_root_path.inspect %>
  # config.s3_storage_path        = <%= Refinery::Storage.s3_storage_path.inspect %>
  # config.s3_storage_headers     = <%= Refinery::Storage.s3_storage_headers.inspect %>
  # config.s3_url_host            = <%= Refinery::Storage.s3_url_host.inspect %>
  # config.s3_url_scheme          = <%= Refinery::Storage.s3_url_scheme.inspect %>
  # config.s3_use_iam_profile     = <%= Refinery::Storage.s3_use_iam_profile.inspect %>

  # Configure a custom Storage datastore instead of the default (filesystem).
  # Storage offers gems for datastores on S3, Couch, Mongo
  # See http://markevans.github.io/storage/data-stores#building-a-custom-data-store
  #
  # config.custom_datastore_class = <%= Refinery::Storage.custom_datastore_class.inspect %>
  # config.custom_datastore_opts  = <%= Refinery::Storage.custom_datastore_opts.inspect %>

end
